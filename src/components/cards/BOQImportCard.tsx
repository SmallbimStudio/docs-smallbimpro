"use client"

import * as React from "react"
import Papa, { ParseResult } from "papaparse"
import {
  Card, CardHeader, CardTitle, CardDescription, CardContent,
} from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import {
  Table, TableBody, TableCell, TableHead, TableHeader, TableRow,
} from "@/components/ui/table"
import {
  PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer,
} from "recharts"
import { Upload, Printer } from "lucide-react"

type Row = {
  ‡∏•‡∏≥‡∏î‡∏±‡∏ö: string
  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: string
  ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì: string
  ‡∏´‡∏ô‡πà‡∏ß‡∏¢: string
  "%‡πÄ‡∏ú‡∏∑‡πà‡∏≠": string
  "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß": string
  "‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": string
  "‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏": string
  "‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢": string
  "‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á": string
  "‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": string
  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: string
}

export default function BOQImportCard() {
  const [data, setData] = React.useState<Row[]>([])

  // üîπ State ‡∏ü‡∏≠‡∏£‡πå‡∏° Title Page
  const [project, setProject] = React.useState({
    name: "",
    owner: "",
    address: "",
    estimator: "",
    date: new Date().toLocaleDateString("th-TH"),
  })

   // ‡∏≠‡πà‡∏≤‡∏ô CSV
  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return
    Papa.parse<Row>(file, {
      header: true,
      skipEmptyLines: true,
      complete: (results: ParseResult<Row>) => {
        setData(results.data)
      },
    })
  }

   // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
  const chartData = React.useMemo(() => {
    if (!data.length) return []
    const groups: Record<string, number> = {}
    data.forEach((row) => {
      const name = row["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"] || "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
      if (name.startsWith("‡∏´‡∏°‡∏ß‡∏î")) {
        const val = parseFloat(row["‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]) || 0
        groups[name] = (groups[name] || 0) + val
      }
    })
    const total = Object.values(groups).reduce((a, b) => a + b, 0)
    return Object.entries(groups).map(([cat, val]) => ({
      name: cat,
      value: val,
      percent: ((val / total) * 100).toFixed(1),
    }))
  }, [data])

  // Print
  const handleExport = () => {
    window.print()
  }

  const COLORS = ["#2563eb", "#16a34a", "#dc2626", "#f59e0b", "#7c3aed", "#0891b2"]

  function rowClassByItem(name: string) {
  if (!name) return "bg-white"

  if (name.startsWith("‡∏´‡∏°‡∏ß‡∏î")) {
    return "category-row"
  }
  if (name.startsWith("‡∏á‡∏≤‡∏ô‡∏î‡∏¥‡∏ô ‡∏´‡∏¥‡∏ô")) {
    return "summary-row"
  }
  if (name.startsWith("‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï")) {
    return "summary-row"
  }
  if (name.startsWith("‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡πà‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï")) {
    return "summary-row"
  }
  if (name.startsWith("‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πá‡∏Å‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï")) {
    return "summary-row"
  }
   if (name.startsWith("‡∏á‡∏≤‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á")) {
    return "summary-row"
  }
   if (name.startsWith("‡∏á‡∏≤‡∏ô‡∏ú‡∏ô‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏¥‡∏ß‡∏ú‡∏ô‡∏±‡∏á")) {
    return "summary-row"
  }
  if (name.startsWith("‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏¥‡∏ß‡∏û‡∏∑‡πâ‡∏ô")) {
    return "summary-row"
  }
   if (name.startsWith("‡∏á‡∏≤‡∏ô‡∏ù‡πâ‡∏≤‡πÄ‡∏û‡∏î‡∏≤‡∏ô")) {
    return "summary-row"
  }
  if (name.startsWith("‡∏á‡∏≤‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏á‡∏Å‡∏ö")) {
    return "summary-row"
  }
  if (name.startsWith("‡∏á‡∏≤‡∏ô‡∏ó‡∏≤‡∏™‡∏µ")) {
    return "summary-row"
  }
  if (name.startsWith("‡∏á‡∏≤‡∏ô‡∏°‡∏∏‡∏á")) {
    return "summary-row"
  }
   if (name.startsWith("‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡πá‡∏î‡πÄ‡∏ï‡∏•‡πá‡∏î")) {
    return "summary-row"
  }
  if (name.startsWith("‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤")) {
    return "summary-row"
  }
  if (name.startsWith("‡∏á‡∏≤‡∏ô‡∏ó‡πà‡∏≠‡∏ô‡πâ‡∏≥‡∏î‡∏µ")) {
    return "summary-row"
  }
  if (name.startsWith("‡∏á‡∏≤‡∏ô‡∏ó‡πà‡∏≠‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢")) {
    return "summary-row"
  }
  if (name.startsWith("‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏ô‡πâ‡∏≥")) {
    return "summary-row"
  }
  if (name.includes("‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î")) {
    return "summary-row"
  }

  return ""
}


  return (
    <Card>
      
      <CardContent className="space-y-6">
        {/* üîπ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ */}
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="text-sm">‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</label>
            <Input
              value={project.name}
              onChange={(e) => setProject({ ...project, name: e.target.value })}
              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"
            />
          </div>
          <div>
            <label className="text-sm">‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô</label>
            <Input
              value={project.owner}
              onChange={(e) => setProject({ ...project, owner: e.target.value })}
              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô"
            />
          </div>
          <div>
            <label className="text-sm">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</label>
            <Input
              value={project.address}
              onChange={(e) => setProject({ ...project, address: e.target.value })}
              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"
            />
          </div>
          <div>
            <label className="text-sm">‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤</label>
            <Input
              value={project.estimator}
              onChange={(e) => setProject({ ...project, estimator: e.target.value })}
              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤"
            />
          </div>
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏° Import + Export */}
        <div className="flex items-center gap-3">
          <input type="file" accept=".csv" onChange={handleFileUpload} className="hidden" id="boq-file" />
          <label htmlFor="boq-file">
            <Button variant="outline" asChild>
              <span className="flex items-center gap-2 cursor-pointer">
                <Upload className="h-4 w-4" /> Import CSV
              </span>
            </Button>
          </label>
          {data.length > 0 && (
            <Button onClick={handleExport} variant="outline">
              <Printer className="h-4 w-4 mr-1" /> Print / Export PDF
            </Button>
          )}
        </div>

        {/* üîπ Title Page (Print Only) */}
        {data.length > 0 && (
          <div id="title-page" className="print:block hidden text-center my-12">
            <h1 className="text-2xl font-bold mb-6">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤ (Bills of Quantities)</h1>
            <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£:</strong> {project.name}</p>
            <p><strong>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô:</strong> {project.owner}</p>
            <p><strong>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</strong> {project.address}</p>
            <p><strong>‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤:</strong> {project.estimator}</p>
            <p><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> {project.date}</p>
          </div>
        )}

        {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á BOQ */}
        {data.length > 0 && (
          <div
            id="boq-table"
            className="border rounded-md overflow-x-auto print:overflow-visible print:border-0"
          >
            <Table className="table-fixed w-full text-xs">
              <TableHeader>
                <TableRow className="bg-gray-100">
                  <TableHead className="w-[45px] text-center">‡∏•‡∏≥‡∏î‡∏±‡∏ö</TableHead>
                  <TableHead className="w-[300px] text-center">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</TableHead>
                  <TableHead className="w-[60px] text-center">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì</TableHead>
                  <TableHead className="w-[45px] text-center">‡∏´‡∏ô‡πà‡∏ß‡∏¢</TableHead>
                  <TableHead className="w-[45px] text-center">%‡πÄ‡∏ú‡∏∑‡πà‡∏≠</TableHead>
                  <TableHead className="w-[55px] text-center">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì<br/>‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß</TableHead>
                  <TableHead className="w-[70px] text-center">‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏<br/>‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢</TableHead>
                  <TableHead className="w-[70px] text-center">‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏</TableHead>
                  <TableHead className="w-[70px] text-center">‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á<br/>‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢</TableHead>
                  <TableHead className="w-[70px] text-center">‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á</TableHead>
                  <TableHead className="w-[70px] text-center">‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤<br/>‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</TableHead>
                  <TableHead className="w-[120px] text-center">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {data.map((row, idx) => (
                  <TableRow key={idx} className={rowClassByItem(row["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"])}>
                    <TableCell>{row["‡∏•‡∏≥‡∏î‡∏±‡∏ö"]}</TableCell>
                    <TableCell className="whitespace-normal break-words">{row["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"]}</TableCell>
                    <TableCell className="text-right">{row["‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì"]}</TableCell>
                    <TableCell>{row["‡∏´‡∏ô‡πà‡∏ß‡∏¢"]}</TableCell>
                    <TableCell>{row["%‡πÄ‡∏ú‡∏∑‡πà‡∏≠"]}</TableCell>
                    <TableCell className="text-right">{row["‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß"]}</TableCell>
                    <TableCell className="text-right">{row["‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"]}</TableCell>
                    <TableCell className="text-right">{row["‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏"]}</TableCell>
                    <TableCell className="text-right">{row["‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"]}</TableCell>
                    <TableCell className="text-right">{row["‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á"]}</TableCell>
                    <TableCell className="text-right">
                      {parseFloat(row["‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] || "0").toLocaleString("th-TH")}
                    </TableCell>
                    <TableCell className="whitespace-normal break-words">{row["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
                
            </Table>
          </div>
        )}
      </CardContent>
    </Card>
  )
}